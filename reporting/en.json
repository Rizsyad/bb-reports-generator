{
  "templates": "Hello {{program}} team,\nMy name {{name}} and i founded this vulnerability in your website.\n\n<b><u>Vulnerability: {{bugs}} on {{website}}</u></b>\n{{report}}\n\n<b>Severity Rate:</b>\n{{severity}}\n\n<b>Description:</b>\n{{description}}\n\n<b>Fix:</b>\n{{remediation}}\n\n<b>POC:</b>\n{{poc}}\n\n<b>Impact:</b>\n{{impact}}\n\n<b>References:</b>\n{{references}}\n\n\nBest regards,\nThanks for your time.\n{{name}}",
  "SQL Injection": {
    "description": "SQL injection, also known as SQLI, is a common attack vector that uses malicious SQL code for backend database manipulation to access information that was not intended to be displayed.",
    "remediation": [
      "Use of Prepared Statements (with Parameterized Queries)",
      "Allow-list Input Validation"
    ],
    "impact": "unauthorized viewing of user lists, the deletion of entire tables and, in certain cases, the attacker gaining administrative rights to a database",
    "severity": "High"
  },
  "XSS": {
    "description": "Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application. It allows an attacker to circumvent the same origin policy, which is designed to segregate different websites from each other. Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data.",
    "remediation": [
      "Applications must validate data input to the web application from user browsers.",
      "All output from the web application to user browsers must be encoded.",
      "Users must have the option to disable client-site scripts."
    ],
    "impact": "When attackers succeed in exploiting XSS vulnerabilities, they can gain access to account credentials. They can also spread web worms or access the user’s computer and view the user’s browser history or control the browser remotely. After gaining control to the victim’s system, attackers can also analyze and use other intranet applications.",
    "severity": "High"
  },
  "Click Jacking": {
    "description": "Clickjacking is an attack that tricks a user into clicking a webpage element which is invisible or disguised as another element. This can cause users to unwittingly download malware, visit malicious web pages, provide credentials or sensitive information, transfer money, or purchase products online. \n \nTypically, clickjacking is performed by displaying an invisible page or HTML element, inside an iframe, on top of the page the user sees. The user believes they are clicking the visible page but in fact they are clicking an invisible element in the additional page transposed on top of it.",
    "remediation": [
      "Sending the proper Content Security Policy (CSP) frame-ancestors directive response headers that instruct the browser to not allow framing from other domains. The older X-Frame-Options HTTP headers is used for graceful degradation and older browser compatibility.",
      "Properly setting authentication cookies with SameSite=Strict (or Lax), unless they explicitly need None (which is rare).",
      "Employing defensive code in the UI to ensure that the current frame is the most top level window"
    ],
    "impact": "The user assumes that they're entering their information into a usual form but they're actually entering it in fields the hacker has overlaid on the UI.",
    "severity": "Low to High"
  },
  "Open Redirect": {
    "description": "An open redirect vulnerability occurs when an application allows a user to control a redirect or forward to another URL.",
    "remediation": [
      "Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.",
      "Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list."
    ],
    "impact": "Open redirection attacks are most commonly used to support phishing attacks, or redirect users to malicious websites.",
    "severity": "Low"
  },
  "IDOR": {
    "description": "Insecure direct object references (IDOR) are a type of access control vulnerability that arises when an application uses user-supplied input to access objects directly. The term IDOR was popularized by its appearance in the OWASP 2007 Top Ten. However, it is just one example of many access control implementation mistakes that can lead to access controls being circumvented. IDOR vulnerabilities are most commonly associated with horizontal privilege escalation, but they can also arise in relation to vertical privilege escalation.",
    "remediation": [
      "Developers should avoid displaying private object references such as keys or file names.",
      "Validation of Parameters should be properly implemented.",
      "Verification of all the Referenced objects should be done.",
      "Tokens should be generated in such a way that they should only be mapped to the user and should not be public.",
      "Use random identifiers so that it will be a little bit hard to guess for attackers.",
      "Validation of user input should be properly implemented."
    ],
    "impact": "The impact of an insecure direct object reference vulnerability depends very much on the application’s functionality. Therefore, a clear list can not be easily given. Generally speaking, an IDOR vulnerability can introduce a risk for CIA (confidentiality, integrity, availability) of data.",
    "severity": "Informational / Low / Medium / High / Critical‍"
  },
  "Directory Listing": {
    "description": "Directory Listing is a type of Web page that lists files and directories that exist on a Web server.",
    "remediation": [
      "Configure your web server to prevent directory listings for all paths beneath the web root",
      "Place into each directory a default file (such as index.html) that the web server will display instead of returning a directory listing."
    ],
    "impact": "Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.",
    "severity": "Information"
  },
  "Information Disclosure": {
    "description": "Information disclosure, also known as information leakage, is when a website unintentionally reveals sensitive information to its users.",
    "remediation": [
      "Developers must first identify which data are sensitive according to the system architecture and regulatory requirements.",
      "Developers must ensure data in transit or storage are encrypted.",
      "Developers should remove debugging and test functionality from production applications and systems.",
      "Developers should review the listed items to determine if a justifiable business need exists for possessing each item present. Any items deemed unnecessary should be removed.",
      "Defined application/system build procedures should include steps to remove the files and features that are unnecessary for a production deployment, and internal security processes and controls should confirm this has occurred prior to production release."
    ],
    "impact": "The scale of impact from a Sensitive Information Disclosure event is limited only by the type of sensitive information disclosed and a malicious actor’s ability to leverage it.",
    "severity": "High"
  },
  "Local File Inclusion": {
    "description": "Local file inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application.",
    "remediation": [
      "If possible, do not permit file paths to be appended directly. Make them hard-coded or selectable from a limited hard-coded path list via an index variable.",
      "If you definitely need dynamic path concatenation, ensure you only accept required characters such as \"a-Z0-9\" and do not allow \"..\" or \"/\" or \"%00\" (null byte) or any other similar unexpected characters.",
      "It's important to limit the API to allow inclusion only from a directory and directories below it.",
      "This ensures that any potential attack cannot perform a directory traversal attack."
    ],
    "impact": "The impact of a Local File Inclusion attack can vary based on the exploitation and the read permissions of the webserver user.",
    "severity": "High"
  },
  "CSRF": {
    "description": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application",
    "remediation": [
      "add an unpredictable token in each request.",
      "add a captcha.",
      "ask user confirmation before performing any action."
    ],
    "impact": "the attacker causes the victim user to carry out an action unintentionally.",
    "severity": "Medium to High"
  }
}
